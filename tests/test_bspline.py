from nebula.evaluators.bspline import BSplineEvaluator
import jax.numpy as jnp


def test_bspline_curve():
    u = jnp.linspace(0.0, 1.0, 10)
    actual = BSplineEvaluator.eval_curve(
        degree=jnp.array(2),
        ctrl_pnts=jnp.array([[1, 0, 0], [1, 1, 0], [0, 1, 0]]),
        u=u,
        knots=jnp.array([0, 0, 0, 1, 1, 1]),
    )
    expected = jnp.array(
        [
            [1.0, 0.0, 0.0],
            [0.9876543209876543, 0.20987654320987653, 0.0],
            [0.9506172839506173, 0.3950617283950617, 0.0],
            [0.8888888888888891, 0.5555555555555556, 0.0],
            [0.8024691358024691, 0.691358024691358, 0.0],
            [0.691358024691358, 0.8024691358024691, 0.0],
            [0.5555555555555556, 0.8888888888888888, 0.0],
            [0.3950617283950617, 0.9506172839506173, 0.0],
            [0.20987654320987661, 0.9876543209876544, 0.0],
            [0.0, 1.0, 0.0],
        ]
    )

    assert jnp.allclose(actual, expected, atol=1e-3)


def test_bspline_surface():
    u = jnp.linspace(0.0, 1.0, 5)
    actual = BSplineEvaluator.eval_surface(
        u_degree=jnp.array(3),
        v_degree=jnp.array(3),
        ctrl_pnts=jnp.array(
            [
                [-25.0, -25.0, -10.0],
                [-25.0, -15.0, -5.0],
                [-25.0, -5.0, 0.0],
                [-25.0, 5.0, 0.0],
                [-25.0, 15.0, -5.0],
                [-25.0, 25.0, -10.0],
                [-15.0, -25.0, -8.0],
                [-15.0, -15.0, -4.0],
                [-15.0, -5.0, -4.0],
                [-15.0, 5.0, -4.0],
                [-15.0, 15.0, -4.0],
                [-15.0, 25.0, -8.0],
                [-5.0, -25.0, -5.0],
                [-5.0, -15.0, -3.0],
                [-5.0, -5.0, -8.0],
                [-5.0, 5.0, -8.0],
                [-5.0, 15.0, -3.0],
                [-5.0, 25.0, -5.0],
                [5.0, -25.0, -3.0],
                [5.0, -15.0, -2.0],
                [5.0, -5.0, -8.0],
                [5.0, 5.0, -8.0],
                [5.0, 15.0, -2.0],
                [5.0, 25.0, -3.0],
                [15.0, -25.0, -8.0],
                [15.0, -15.0, -4.0],
                [15.0, -5.0, -4.0],
                [15.0, 5.0, -4.0],
                [15.0, 15.0, -4.0],
                [15.0, 25.0, -8.0],
                [25.0, -25.0, -10.0],
                [25.0, -15.0, -5.0],
                [25.0, -5.0, 2.0],
                [25.0, 5.0, 2.0],
                [25.0, 15.0, -5.0],
                [25.0, 25.0, -10.0],
            ]
        ).reshape(6, 6, 3),
        u_knots=jnp.array([0.0, 0.0, 0.0, 0.0, 0.33, 0.66, 1.0, 1.0, 1.0, 1.0]),
        v_knots=jnp.array([0.0, 0.0, 0.0, 0.0, 0.33, 0.66, 1.0, 1.0, 1.0, 1.0]),
        u=u,
        v=u,
    )
    expected = jnp.array(
        [
            [
                [-25.0, -25.0, -10.0],
                [-25.000004, -9.077171, -2.397286],
                [-25.000002, 0.11256424, -0.3082978],
                [-25.000002, 9.309787, -2.4978478],
                [-25.0, 25.0, -10.0],
            ],
            [
                [-9.077171, -25.000004, -6.2806444],
                [-9.077172, -9.077172, -4.8789206],
                [-9.077172, 0.11256425, -5.9172673],
                [-9.077171, 9.309788, -4.8489876],
                [-9.077171, 25.000004, -6.2806444],
            ],
            [
                [0.11256424, -25.000002, -4.2381387],
                [0.1125643, -9.077172, -5.3740025],
                [0.1125643, 0.11256424, -7.434884],
                [0.11256424, 9.309788, -5.299428],
                [0.11256424, 25.000002, -4.2381387],
            ],
            [
                [9.309787, -25.000002, -5.5793867],
                [9.309788, -9.077171, -4.6443815],
                [9.309788, 0.11256424, -5.7848625],
                [9.309787, 9.309787, -4.609164],
                [9.309787, 25.000002, -5.5793867],
            ],
            [
                [25.0, -25.0, -10.0],
                [25.000004, -9.077171, -1.3277057],
                [25.000002, 0.11256424, 1.5683833],
                [25.000002, 9.309787, -1.4598912],
                [25.0, 25.0, -10.0],
            ],
        ],
        dtype=jnp.float32,
    )

    assert jnp.allclose(actual, expected, atol=1e-3)
